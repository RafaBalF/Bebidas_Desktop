// ignore_for_file: prefer_const_constructors, unnecessary_null_comparison

import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:mobx/mobx.dart';
import 'package:ped/model/login_model.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';

import '../pedido/pedido_page.dart';

part 'login_store.g.dart';

class LoginStore = _LoginStoreBase with _$LoginStore;

abstract class _LoginStoreBase with Store {
  var client = Client();

  @observable
  String? idPdvObs;

  @action
  changeIdPdvObs(String? value) => idPdvObs = value;

  @computed
  bool get isValid {
    return validateLogin() == null && validateSenha() == null;
  }

  String? validateLogin() {
    if (client.login == '' || client.login.isEmpty) {
      return "Por favor insira seu login";
    } else if (client.login.length < 6) {
      return "seu login precisa ter mais de 5 caracteres";
    }
    return null;
  }

  String? validateSenha() {
    if (client.senha == '' || client.senha.isEmpty) {
      return "Por favor insira sua senha";
    } else if (client.senha.length < 6) {
      return "sua senha precisa ter mais de 5 caracteres";
    }
    return null;
  }

  onCLick(context) async {
    var loginAuth = await login(client.login, client.senha);

    // final prefs = await SharedPreferences.getInstance();
    // await prefs.setString('token', loginAuth!.token);

    if (loginAuth != null) {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('token', loginAuth.token.toString());
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => PedidoPage(title: 'Pedidos'),
        ),
      );
    } else {
      showDialog(
        context: context,
        builder: (_) {
          return AlertDialog(
            title: Text('Atenção'),
            content: Text('Login Invalido'),
          );
        },
      );
    }
  }

  Future<LoginAutogenerated?> login(String login, String senha) async {
    var request = http.MultipartRequest(
        'POST', Uri.parse('http://127.0.0.1:8000/api/login'));
    request.fields.addAll({'email': login, 'password': senha});

    http.StreamedResponse response = await request.send();
    var dados = jsonDecode(await response.stream.bytesToString());

    if (response.statusCode == 200) {
      var data = LoginAutogenerated.fromJson(dados);

      return data;
    } else {
      return null; //tem que ajeita aqui pra login invalido statusCode 400
    }
  }
}

class LoginAutogenerated {
  LoginAutogenerated({
    required this.token,
    required this.user,
  });
  late final String token;
  late final User user;

  LoginAutogenerated.fromJson(Map<String, dynamic> json) {
    token = json['token'];
    user = User.fromJson(json['user']);
  }

  Map<String, dynamic> toJson() {
    final _data = <String, dynamic>{};
    _data['token'] = token;
    _data['user'] = user.toJson();
    return _data;
  }
}

class User {
  User({
    required this.id,
    required this.uuid,
    required this.companyId,
    required this.name,
    required this.email,
    required this.createdAt,
    required this.updatedAt,
    required this.provider,
    required this.providerId,
    required this.franchiseId,
    this.deletedAt,
  });
  late final int id;
  late final String uuid;
  late final int companyId;
  late final String name;
  late final String email;
  late final String createdAt;
  late final String updatedAt;
  late final String provider;
  late final String providerId;
  late final int franchiseId;
  late final Null deletedAt;

  User.fromJson(Map<String, dynamic> json) {
    id = json['id'];
    uuid = json['uuid'];
    companyId = json['company_id'];
    name = json['name'];
    email = json['email'];
    createdAt = json['created_at'];
    updatedAt = json['updated_at'];
    provider = json['provider'];
    providerId = json['provider_id'];
    franchiseId = json['franchise_id'];
    deletedAt = null;
  }

  Map<String, dynamic> toJson() {
    final _data = <String, dynamic>{};
    _data['id'] = id;
    _data['uuid'] = uuid;
    _data['company_id'] = companyId;
    _data['name'] = name;
    _data['email'] = email;
    _data['created_at'] = createdAt;
    _data['updated_at'] = updatedAt;
    _data['provider'] = provider;
    _data['provider_id'] = providerId;
    _data['franchise_id'] = franchiseId;
    _data['deleted_at'] = deletedAt;
    return _data;
  }
}
